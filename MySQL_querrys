-- Is there any pattern for delayed orders, e.g. big products being delayed more often?
SELECT 
    product_category_name_english,
    CASE 
        WHEN DATEDIFF(o.order_estimated_delivery_date, o.order_delivered_customer_date) < 0 THEN 'delayed'
        WHEN DATEDIFF(o.order_estimated_delivery_date, o.order_delivered_customer_date) >= 0 THEN 'on_time'
        ELSE 'unknown'
    END AS delivery,
    -- CASE
    --    WHEN p.product_weight_g > avg_weight OR p.product_length_cm > avg_length OR p.product_height_cm > avg_height OR p.product_width_cm > avg_width THEN 'big'
    --    ELSE 'small'
    -- END AS weight,
    COUNT(*) AS 'number_orders'
FROM 
    (SELECT 
        AVG(p.product_weight_g) AS avg_weight,
        AVG(p.product_length_cm) AS avg_length,
        AVG(p.product_height_cm) AS avg_height, 
        AVG(product_width_cm) AS avg_width
    FROM
        products AS p) AS x,
    orders AS o
JOIN 
    order_items AS oi ON o.order_id = oi.order_id  
JOIN 
    products AS p ON oi.product_id = p.product_id
JOIN 
    product_category_name_translation as transl ON transl.product_category_name = p.product_category_name
WHERE 
    order_status like '%delivered%'
GROUP BY delivery, product_category_name_english
ORDER BY product_category_name_english;

SELECT
    3012 / 4396 AS 'ratio_delayed',
    42734 / 60047 AS 'ratio_ontime';
How many sellers are there? How many Tech sellers are there? What percentage of overall sellers are Tech sellers?
SELECT 
    total_sellers,
    COUNT(DISTINCT s.seller_id) AS tech_sellers,
    ROUND((COUNT(DISTINCT s.seller_id) / total_sellers) * 100, 2) AS tech_sellers_perc
FROM 
(SELECT 
    COUNT(DISTINCT seller_id) AS total_sellers
FROM sellers) AS total_sellers,
    sellers AS s
JOIN 
    order_items AS oi ON s.seller_id = oi.seller_id
JOIN
    products AS p ON oi.product_id = p.product_id
JOIN
    product_category_name_translation AS transl ON p.product_category_name = transl.product_category_name
WHERE
    transl.product_category_name_english IN (
        "electronics", 
        "computers", 
        "computers_accessories", 
        "audio", 
        "pc_gamer", 
        "consoles_games", 
        "cine_photo");
-- Total revenue of all sellers 
SELECT
    ROUND(SUM(oi.price), 2) AS total_revenue
FROM 
    order_items as oi
JOIN
    orders as o ON o.order_id = oi.order_id
WHERE 
        o.order_status NOT IN (
        "unavailable",
        "canceled");

-- Added tech revenue and percentage
SELECT 
    total_revenue,
    ROUND(SUM(oi.price), 2) AS tech_revenue,
    ROUND((ROUND(SUM(oi.price), 2) / total_revenue) * 100, 2) AS perc_tech_revenue
FROM 
    (SELECT
        ROUND(SUM(oi.price), 2) AS total_revenue
    FROM 
        order_items as oi
    JOIN
        orders as o ON o.order_id = oi.order_id
    WHERE 
            o.order_status NOT IN (
            "unavailable",
            "canceled")) AS total_revenue,
    order_items AS oi
JOIN 
    orders AS o ON o.order_id = oi.order_id
JOIN 
    products AS p on p.product_id = oi.product_id
JOIN 
    product_category_name_translation as transl ON transl.product_category_name = p.product_category_name
WHERE
    transl.product_category_name_english IN (
        "electronics", 
        "computers", 
        "computers_accessories", 
        "audio", 
        "pc_gamer", 
        "consoles_games", 
        "cine_photo")     
AND
    o.order_status NOT IN (
    "unavailable",
    "canceled");
    
    
    
    
-- Joan code

with main as ( 
    SELECT * FROM orders
    WHERE order_delivered_customer_date AND order_estimated_delivery_date IS NOT NULL
    ),
    d1 as (
    SELECT *, (order_delivered_customer_date - order_estimated_delivery_date)/1000/60/60/24 AS delay FROM main
    )
    
SELECT 
    CASE 
        WHEN delay > 101 THEN "> 100 day Delay"
        WHEN delay > 3 AND delay < 8 THEN "3-7 day delay"
        WHEN delay > 1.5 THEN "1.5 - 3 days delay"
        ELSE "< 1.5 day delay"
    END AS "delay_range", 
    AVG(product_weight_g) AS weight_avg,
    MAX(product_weight_g) AS max_weight,
    MIN(product_weight_g) AS min_weight,
    SUM(product_weight_g) AS sum_weight,
    COUNT(*) AS product_count FROM d1 a
INNER JOIN order_items b
ON a.order_id = b.order_id
INNER JOIN products c
ON b.product_id = c.product_id
WHERE delay > 0
GROUP BY delay_range
ORDER BY weight_avg DESC;
